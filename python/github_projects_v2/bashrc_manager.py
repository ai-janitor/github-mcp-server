"""
UNDERSTANDING: Manages automatic updates to shell RC files (.bashrc, .zshrc) for gh-projects-v2 configuration
DEPENDENCIES: os, shutil, re, datetime for file operations and pattern matching
EXPORTS: BashrcManager class with update_shell_config method
INTEGRATION: Used by CLI extract-setup command to automate shell configuration
"""

import os
import shutil
import re
from datetime import datetime
from typing import Optional, Tuple, List


class BashrcManager:
    """Manages automatic updates to shell RC files for gh-projects-v2 configuration."""
    
    # UNDERSTANDING: Markers to identify our configuration blocks in shell files
    START_MARKER = "# BEGIN gh-projects-v2 configuration"
    END_MARKER = "# END gh-projects-v2 configuration"
    
    def __init__(self):
        self.supported_shells = ['.bashrc', '.zshrc', '.profile']
    
    def detect_shell_file(self) -> Optional[str]:
        """
        UNDERSTANDING: Detect which shell RC file exists in user's home directory
        RETURNS: Path to detected shell file or None if not found
        INTEGRATION: Used to automatically find the right config file to update
        """
        home_dir = os.path.expanduser("~")
        
        for shell_file in self.supported_shells:
            file_path = os.path.join(home_dir, shell_file)
            if os.path.exists(file_path):
                return file_path
        
        # Default to .bashrc if none exist
        return os.path.join(home_dir, '.bashrc')
    
    def create_backup(self, file_path: str) -> str:
        """
        UNDERSTANDING: Create timestamped backup of shell RC file before modification
        EXPECTS: file_path - path to shell RC file to backup
        RETURNS: Path to backup file created
        INTEGRATION: Safety mechanism to allow recovery if something goes wrong
        """
        if not os.path.exists(file_path):
            return ""
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{file_path}.gh-projects-v2-backup.{timestamp}"
        shutil.copy2(file_path, backup_path)
        return backup_path
    
    def find_existing_config(self, content: str) -> Tuple[bool, int, int]:
        """
        UNDERSTANDING: Find existing gh-projects-v2 configuration block in shell file content
        EXPECTS: content - string content of shell RC file
        RETURNS: (found, start_line, end_line) tuple indicating if config exists and its location
        INTEGRATION: Used to detect and replace existing configuration blocks
        """
        lines = content.split('\n')
        start_line = -1
        end_line = -1
        
        for i, line in enumerate(lines):
            if self.START_MARKER in line:
                start_line = i
            elif self.END_MARKER in line and start_line != -1:
                end_line = i
                break
        
        found = start_line != -1 and end_line != -1
        return found, start_line, end_line
    
    def generate_config_block(self, github_token: str, project_id: str) -> str:
        """
        UNDERSTANDING: Generate the configuration block to add to shell RC file
        EXPECTS: github_token and project_id for environment variables
        RETURNS: Formatted configuration block with exports and completion setup
        INTEGRATION: Creates the actual content that gets added to the shell file
        """
        config_lines = [
            self.START_MARKER,
            f"# Generated by gh-projects-v2 on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"export GITHUB_TOKEN='{github_token}'",
            f"export GITHUB_PROJECT_ID='{project_id}'",
            "# Enable shell completion for gh-projects-v2",
            "eval \"$(register-python-argcomplete gh-projects-v2)\"",
            self.END_MARKER,
            ""
        ]
        return '\n'.join(config_lines)
    
    def update_shell_config(self, github_token: str, project_id: str, 
                          shell_file_path: Optional[str] = None, 
                          create_backup: bool = True) -> Tuple[bool, str, str]:
        """
        UNDERSTANDING: Main method to update shell RC file with gh-projects-v2 configuration
        EXPECTS: github_token, project_id, optional shell_file_path, backup flag
        RETURNS: (success, message, backup_path) tuple with operation result
        INTEGRATION: Primary interface used by CLI extract-setup command
        """
        if shell_file_path is None:
            shell_file_path = self.detect_shell_file()
        
        if not shell_file_path:
            return False, "Could not detect shell RC file", ""
        
        # Create backup if requested and file exists
        backup_path = ""
        if create_backup and os.path.exists(shell_file_path):
            backup_path = self.create_backup(shell_file_path)
        
        try:
            # Read existing content or create empty
            if os.path.exists(shell_file_path):
                with open(shell_file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            else:
                content = ""
            
            # Find and handle existing configuration
            found, start_line, end_line = self.find_existing_config(content)
            
            lines = content.split('\n') if content else []
            
            if found:
                # Comment out existing configuration
                for i in range(start_line, end_line + 1):
                    if i < len(lines) and not lines[i].startswith('#'):
                        lines[i] = f"# COMMENTED OUT: {lines[i]}"
                
                # Insert new configuration after the commented block
                new_config_lines = self.generate_config_block(github_token, project_id).split('\n')
                for i, new_line in enumerate(new_config_lines):
                    lines.insert(end_line + 1 + i, new_line)
            else:
                # Add new configuration at the end
                if lines and lines[-1].strip():  # Add blank line if file doesn't end with one
                    lines.append("")
                lines.extend(self.generate_config_block(github_token, project_id).split('\n'))
            
            # Write updated content
            with open(shell_file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(lines))
            
            action = "updated" if found else "added"
            message = f"Successfully {action} gh-projects-v2 configuration in {shell_file_path}"
            if backup_path:
                message += f"\nBackup created at: {backup_path}"
            
            return True, message, backup_path
            
        except Exception as e:
            error_msg = f"Failed to update {shell_file_path}: {str(e)}"
            return False, error_msg, backup_path
    
    def get_shell_reload_instruction(self, shell_file_path: str) -> str:
        """
        UNDERSTANDING: Generate instruction for user to reload their shell configuration
        EXPECTS: shell_file_path - path to the shell RC file that was updated
        RETURNS: Command string for user to reload shell configuration
        INTEGRATION: Provides user-friendly instruction after configuration update
        """
        return f"To activate the changes, run: source {shell_file_path}"